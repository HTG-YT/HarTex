// ==================! DO NOT MODIFY !==================
// This file is automatically generated by `hartex-database-typedsql`. Please do not modify this in
// any way.
// ==================! DO NOT MODIFY !==================

pub struct NightlyCachedEmojis {
    managed: bool,
    id: String,
    name: String,
    guild_id: String,
    animated: bool,
}
impl NightlyCachedEmojis {
    #[must_use]
    pub fn managed(&self) -> bool {
        self.managed
    }
    #[must_use]
    pub fn id(&self) -> &str {
        self.id.as_str()
    }
    #[must_use]
    pub fn name(&self) -> &str {
        self.name.as_str()
    }
    #[must_use]
    pub fn guild_id(&self) -> &str {
        self.guild_id.as_str()
    }
    #[must_use]
    pub fn animated(&self) -> bool {
        self.animated
    }
}
pub struct NightlyCachedMembers {
    nick: Option<String>,
    user_id: String,
    roles: Vec<String>,
    flags: i64,
    guild_id: String,
    joined_at: Option<time::OffsetDateTime>,
}
impl NightlyCachedMembers {
    #[must_use]
    pub fn nick(&self) -> Option<&str> {
        self.nick.as_deref()
    }
    #[must_use]
    pub fn user_id(&self) -> &str {
        self.user_id.as_str()
    }
    #[must_use]
    pub fn roles(&self) -> &[String] {
        self.roles.as_slice()
    }
    #[must_use]
    pub fn flags(&self) -> i64 {
        self.flags
    }
    #[must_use]
    pub fn guild_id(&self) -> &str {
        self.guild_id.as_str()
    }
    #[must_use]
    pub fn joined_at(&self) -> Option<time::OffsetDateTime> {
        self.joined_at
    }
}
pub struct NightlyGuildConfigurations {
    guild_id: String,
    enabled_plugins: Vec<String>,
}
impl NightlyGuildConfigurations {
    #[must_use]
    pub fn guild_id(&self) -> &str {
        self.guild_id.as_str()
    }
    #[must_use]
    pub fn enabled_plugins(&self) -> &[String] {
        self.enabled_plugins.as_slice()
    }
}
pub struct NightlyCachedRoles {
    hoist: bool,
    color: i64,
    icon: Option<String>,
    guild_id: String,
    position: i32,
    id: String,
    managed: bool,
    mentionable: bool,
    flags: i32,
}
impl NightlyCachedRoles {
    #[must_use]
    pub fn hoist(&self) -> bool {
        self.hoist
    }
    #[must_use]
    pub fn color(&self) -> i64 {
        self.color
    }
    #[must_use]
    pub fn icon(&self) -> Option<&str> {
        self.icon.as_deref()
    }
    #[must_use]
    pub fn guild_id(&self) -> &str {
        self.guild_id.as_str()
    }
    #[must_use]
    pub fn position(&self) -> i32 {
        self.position
    }
    #[must_use]
    pub fn id(&self) -> &str {
        self.id.as_str()
    }
    #[must_use]
    pub fn managed(&self) -> bool {
        self.managed
    }
    #[must_use]
    pub fn mentionable(&self) -> bool {
        self.mentionable
    }
    #[must_use]
    pub fn flags(&self) -> i32 {
        self.flags
    }
}
pub struct NightlyCachedGuilds {
    icon: Option<String>,
    default_message_notifications: i16,
    name: String,
    premium_subscription_count: Option<i64>,
    verification_level: i16,
    id: String,
    features: Vec<String>,
    large: bool,
    mfa_level: i16,
    explicit_content_filter: i16,
    owner_id: String,
    premium_tier: i16,
}
impl NightlyCachedGuilds {
    #[must_use]
    pub fn icon(&self) -> Option<&str> {
        self.icon.as_deref()
    }
    #[must_use]
    pub fn default_message_notifications(&self) -> i16 {
        self.default_message_notifications
    }
    #[must_use]
    pub fn name(&self) -> &str {
        self.name.as_str()
    }
    #[must_use]
    pub fn premium_subscription_count(&self) -> Option<i64> {
        self.premium_subscription_count
    }
    #[must_use]
    pub fn verification_level(&self) -> i16 {
        self.verification_level
    }
    #[must_use]
    pub fn id(&self) -> &str {
        self.id.as_str()
    }
    #[must_use]
    pub fn features(&self) -> &[String] {
        self.features.as_slice()
    }
    #[must_use]
    pub fn large(&self) -> bool {
        self.large
    }
    #[must_use]
    pub fn mfa_level(&self) -> i16 {
        self.mfa_level
    }
    #[must_use]
    pub fn explicit_content_filter(&self) -> i16 {
        self.explicit_content_filter
    }
    #[must_use]
    pub fn owner_id(&self) -> &str {
        self.owner_id.as_str()
    }
    #[must_use]
    pub fn premium_tier(&self) -> i16 {
        self.premium_tier
    }
}
pub struct NightlyCachedUsers {
    name: String,
    id: String,
    bot: bool,
    discriminator: String,
    global_name: Option<String>,
    avatar: Option<String>,
}
impl NightlyCachedUsers {
    #[must_use]
    pub fn name(&self) -> &str {
        self.name.as_str()
    }
    #[must_use]
    pub fn id(&self) -> &str {
        self.id.as_str()
    }
    #[must_use]
    pub fn bot(&self) -> bool {
        self.bot
    }
    #[must_use]
    pub fn discriminator(&self) -> &str {
        self.discriminator.as_str()
    }
    #[must_use]
    pub fn global_name(&self) -> Option<&str> {
        self.global_name.as_deref()
    }
    #[must_use]
    pub fn avatar(&self) -> Option<&str> {
        self.avatar.as_deref()
    }
}
