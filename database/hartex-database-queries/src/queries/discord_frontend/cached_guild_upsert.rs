// ==================! DO NOT MODIFY !==================
// This file is automatically generated by `hartex-database-typedsql`. Please do not modify this in
// any way.
// ==================! DO NOT MODIFY !==================

use std::env;
use tokio::net::TcpStream;
use wtx::database::Executor as _;
use wtx::database::client::postgres::Executor;
use wtx::database::client::postgres::ExecutorBuffer;
use wtx::misc::Uri;
use crate::result::IntoCrateResult;
pub struct CachedGuildUpsert {
    db_executor: Option<Executor<wtx::Error, ExecutorBuffer, TcpStream>>,
    executor_constructor: for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
    default_message_notifications: i16,
    explicit_content_filter: i16,
    features: Vec<String>,
    icon: Option<String>,
    large: bool,
    name: String,
    owner_id: String,
    id: String,
    mfa_level: i16,
    premium_subscription_count: Option<i64>,
    premium_tier: i16,
    verification_level: i16,
}
impl CachedGuildUpsert {
    #[must_use = "Queries must be executed after construction"]
    pub fn bind(
        default_message_notifications: i16,
        explicit_content_filter: i16,
        features: Vec<String>,
        icon: Option<String>,
        large: bool,
        name: String,
        owner_id: String,
        id: String,
        mfa_level: i16,
        premium_subscription_count: Option<i64>,
        premium_tier: i16,
        verification_level: i16,
    ) -> Self {
        Self {
            db_executor: None,
            executor_constructor: crate::internal::__internal_executor_constructor
                as for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
            default_message_notifications,
            explicit_content_filter,
            features,
            icon,
            large,
            name,
            owner_id,
            id,
            mfa_level,
            premium_subscription_count,
            premium_tier,
            verification_level,
        }
    }
    pub async fn executor(mut self) -> crate::result::Result<Self> {
        self.db_executor
            .replace(
                (self
                    .executor_constructor)(
                        Uri::new(&env::var("DISCORD_FRONTEND_PGSQL_URL").unwrap()),
                    )
                    .await?,
            );
        Ok(self)
    }
    pub async fn execute(self) -> crate::result::Result<u64> {
        self.db_executor
            .ok_or(
                crate::result::Error::Generic(
                    ".executor() has not been called on this query yet",
                ),
            )?
            .execute_with_stmt(
                "INSERT INTO \"DiscordFrontend\".\"Nightly\".\"CachedGuilds\" (\"default_message_notifications\", \"explicit_content_filter\", \"features\", \"icon\", \"large\", \"name\", \"owner_id\", \"id\", \"mfa_level\", \"premium_subscription_count\", \"premium_tier\", \"verification_level\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) ON CONFLICT(\"id\") DO UPDATE SET \"default_message_notifications\" = $1, \"explicit_content_filter\" = $2, \"features\" = $3, \"icon\" = $4, \"large\" = $5, \"mfa_level\" = $9, \"name\" = $6, \"owner_id\" = $7, \"premium_subscription_count\" = $10, \"premium_tier\" = $11, \"verification_level\" = $12",
                (
                    self.default_message_notifications,
                    self.explicit_content_filter,
                    self.features,
                    self.icon,
                    self.large,
                    self.name,
                    self.owner_id,
                    self.id,
                    self.mfa_level,
                    self.premium_subscription_count,
                    self.premium_tier,
                    self.verification_level,
                ),
            )
            .await
            .into_crate_result()
    }
}
