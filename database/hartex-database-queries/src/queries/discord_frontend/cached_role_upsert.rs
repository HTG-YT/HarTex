// ==================! DO NOT MODIFY !==================
// This file is automatically generated by `hartex-database-typedsql`. Please do not modify this in
// any way.
// ==================! DO NOT MODIFY !==================

use std::env;
use tokio::net::TcpStream;
use wtx::database::Executor as _;
use wtx::database::client::postgres::Executor;
use wtx::database::client::postgres::ExecutorBuffer;
use wtx::misc::Uri;
use crate::result::IntoCrateResult;
pub struct CachedRoleUpsert {
    db_executor: Option<Executor<wtx::Error, ExecutorBuffer, TcpStream>>,
    executor_constructor: for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
    color: i64,
    icon: Option<String>,
    id: String,
    guild_id: String,
    flags: i32,
    hoist: bool,
    managed: bool,
    mentionable: bool,
    position: i32,
}
impl CachedRoleUpsert {
    #[must_use = "Queries must be executed after construction"]
    pub fn bind(
        color: i64,
        icon: Option<String>,
        id: String,
        guild_id: String,
        flags: i32,
        hoist: bool,
        managed: bool,
        mentionable: bool,
        position: i32,
    ) -> Self {
        Self {
            db_executor: None,
            executor_constructor: crate::internal::__internal_executor_constructor
                as for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
            color,
            icon,
            id,
            guild_id,
            flags,
            hoist,
            managed,
            mentionable,
            position,
        }
    }
    pub async fn executor(mut self) -> crate::result::Result<Self> {
        self.db_executor
            .replace(
                (self
                    .executor_constructor)(
                        Uri::new(&env::var("DISCORD_FRONTEND_PGSQL_URL").unwrap()),
                    )
                    .await?,
            );
        Ok(self)
    }
    pub async fn execute(self) -> crate::result::Result<u64> {
        self.db_executor
            .ok_or(
                crate::result::Error::Generic(
                    ".executor() has not been called on this query yet",
                ),
            )?
            .execute_with_stmt(
                "INSERT INTO \"DiscordFrontend\".\"Nightly\".\"CachedRoles\" (\"color\", \"icon\", \"id\", \"guild_id\", \"flags\", \"hoist\", \"managed\", \"mentionable\", \"position\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) ON CONFLICT(\"id\", \"guild_id\") DO UPDATE SET \"color\" = $1, \"icon\" = $2, \"flags\" = $5, \"hoist\" = $6, \"managed\" = $7, \"mentionable\" = $8, \"position\" = $9",
                (
                    self.color,
                    self.icon,
                    self.id,
                    self.guild_id,
                    self.flags,
                    self.hoist,
                    self.managed,
                    self.mentionable,
                    self.position,
                ),
            )
            .await
            .into_crate_result()
    }
}
