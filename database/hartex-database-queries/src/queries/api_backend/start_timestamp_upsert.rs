// ==================! DO NOT MODIFY !==================
// This file is automatically generated by `hartex-database-typedsql`. Please do not modify this in
// any way.
// ==================! DO NOT MODIFY !==================

use std::env;
use itertools::Itertools;
use tokio::net::TcpStream;
use wtx::database::Executor as _;
use wtx::database::Records;
use wtx::database::client::postgres::Executor;
use wtx::database::client::postgres::ExecutorBuffer;
use wtx::misc::Uri;
use crate::result::IntoCrateResult;
pub struct StartTimestampUpsert {
    db_executor: Option<Executor<wtx::Error, ExecutorBuffer, TcpStream>>,
    executor_constructor: for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
    component: String,
    timestamp: chrono::DateTime<chrono::offset::Utc>,
}
impl StartTimestampUpsert {
    #[must_use = "Queries must be executed after construction"]
    pub fn bind(
        component: String,
        timestamp: chrono::DateTime<chrono::offset::Utc>,
    ) -> Self {
        Self {
            db_executor: None,
            executor_constructor: crate::internal::__internal_executor_constructor
                as for<'a> fn(Uri<&'a str>) -> crate::internal::Ret<'a>,
            component,
            timestamp,
        }
    }
    pub async fn executor(mut self) -> crate::result::Result<Self> {
        self.db_executor
            .replace(
                (self
                    .executor_constructor)(
                        Uri::new(&env::var("API_BACKEND_PGSQL_URL").unwrap()),
                    )
                    .await?,
            );
        Ok(self)
    }
    pub async fn execute(self) -> crate::result::Result<u64> {
        self.db_executor
            .ok_or(
                crate::result::Error::Generic(
                    ".executor() has not been called on this query yet",
                ),
            )?
            .execute_with_stmt(
                "INSERT INTO \"APIBackend\".public.\"StartTimestamps\" (\"component\", \"timestamp\") VALUES ($1, $2) ON CONFLICT(\"component\") DO UPDATE SET \"timestamp\" = $2",
                (self.component, self.timestamp),
            )
            .await
            .into_crate_result()
    }
}
